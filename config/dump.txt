      import { FloatingAction } from "react-native-floating-action";
  const [isActionButtonVisible, setActionButtonVisible] = useState(true);

      <FloatingAction
      style={styles.floater}
        actions={[
          {
            text: 'Edit Subroutine',
            icon: <Icon source="pencil" color="#fff" size={24} />,
            name: 'edit_subroutine',
            position: 2,
            buttonSize: 45
          },
          {
            text: 'Delete Subroutine',
            icon: <Icon source="delete" color="#fff" size={24} />,
            name: 'del_subroutine',
            position: 1,
            buttonSize: 45
          },
          // Add more actions if needed
        ]}
        onPressItem={(name) => {
          if (name === 'edit_subroutine') {
            handleEditRoutine();
          }
        }}
        color="#000"
        buttonSize={60}
        textElevation={0}
        floatingIcon={<Icon source="cheese" color="white" size={30} />}
        overlayColor='rgba(9, 9, 9, 0.85)'
        distanceToEdge={{ vertical: 10, horizontal: 15 }}
      />

      //////////////////////////////////////////////////////////////////////////////
      routine details//////////////////////////////////////////////////
      bad reorder
      import React, { useEffect, useState } from 'react';
import { Text, StyleSheet, ScrollView, Alert, TouchableOpacity } from 'react-native';
import { View } from 'react-native';
import { Icon, FAB, Portal, ToggleButton, Animated } from 'react-native-paper';
import { useNavigation, useIsFocused } from '@react-navigation/native';
import { fetchRoutinesFromStorage, saveRoutinesToStorage } from '../config/dbHelper';
import { calculateTotalDuration } from '../config/utilities';
import SortableList from 'react-native-sortable-list';
import moment from 'moment';

const RoutineDetails = ({ route }) => {
  const { routine } = route.params;
  const navigation = useNavigation();
  const [isFabVisible, setFabVisible] = useState(true);
  const [isFabOpen, setFabOpen] = useState(false);
  const isFocused = useIsFocused();

  const selectedTime = routine.selectedTime;
  const selectedDays = routine.selectedDays;

  const handleEditRoutine = () => {
    navigation.navigate('RoutineOps', { routineId: routine.id });
  };

  useEffect(() => {
    setFabVisible(true); // Reset FAB visibility when the component mounts
  }, [isFocused]);

  const handleDeleteRoutine = async () => {
    Alert.alert(
      'Confirm Deletion',
      `Are you sure you want to delete the list "${routine.name}"?`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: async () => {
            // fetch the current routines from storage
            const routines = await fetchRoutinesFromStorage();
            // filter out the routine to be deleted
            const updatedRoutines = routines.filter((r) => r.id !== routine.id);
            // save the updated routines back to storage
            saveRoutinesToStorage(updatedRoutines);
            navigation.navigate('RoutineList');
          },
        },
      ]
    );
  };
  const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };
  const calculateRoutineTotalDuration = () => {
    return calculateTotalDuration(routine.subroutines);
  };

  const renderItem = ({ data, active }) => {
    return (
      <View style={styles.subroutineContainer}>
        <Icon source="hexagon-multiple-outline" color="#fff" size={24} />
        <View style={{ paddingLeft: 20 }}>
          <Text style={styles.subroutineName}>{data.name}</Text>
          <Text style={styles.subroutineDuration}>{data.duration}</Text>
        </View>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <ScrollView>
        <View style={styles.innerContainer}>
          <View style={[styles.detailsContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }]}>
            <Text style={styles.header}>{routine.name}</Text>
          </View>
          <View style={styles.detailsContainer}>
            <View style={styles.routineHeaders}>
              <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                <Icon source="alarm" color="#000" size={24} />
                <Text style={styles.descriptionText}>Alarm</Text>
              </View>
              <Text style={styles.timeText}>{moment(selectedTime).format("LT")}</Text>
            </View>
            <View style={styles.routineHeaders}>
              <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                <Icon source="timer-outline" color="#000" size={24} />
                <Text style={styles.descriptionText}>Duration</Text>
              </View>
              <Text style={styles.timeText}>{calculateRoutineTotalDuration()}</Text>
            </View>

            <View>
              {/* <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                <Icon source="calendar-week" color="#000" size={24} />
                <Text style={styles.descriptionText}>Selected Days</Text>
              </View> */}
              {/* Display selected time and days */}
              <View style={styles.daysContainer}>
                {Object.keys(selectedDays).map((day) => (
                  <ToggleButton
                    key={day}
                    icon={() => (
                      <Text
                        style={[
                          styles.dayIcon,
                          selectedDays[day] && styles.activeDayIcon,
                        ]}
                      >
                        {day.charAt(0).toUpperCase()}
                      </Text>
                    )}
                    value={selectedDays[day]}
                    // You might need to handle the onPress event appropriately
                    onPress={() => { }}
                    style={[
                      styles.toggleButton,
                      selectedDays[day] && styles.activeToggleButton,
                    ]}
                  >
                    {capitalizeFirstLetter(day)}
                  </ToggleButton>
                ))}
              </View>
            </View>
          </View>

          <View>
            <Text style={styles.subroutineHeader}>Subroutines</Text>
<SortableList
                data={routine.subroutines}
                renderRow={renderItem}
                rowActivationTime={1200}
                onChangeOrder={(nextOrder) => {
                  // Update the routine with the new order of subroutines
                  const updatedRoutine = { ...routine, subroutines: nextOrder };
                  // Save the updated routine to storage or update it in your data source
                  // ...
                }}
              />
          </View>
        </View>
      </ScrollView>
      <Portal>
        {isFocused && isFabVisible && (
          <FAB.Group
            open={isFabOpen}
            visible
            icon={isFabOpen ? 'cheese-off' : 'cheese'}
            backdropColor={'rgba(222, 222, 222, 0.9)'}
            color="#fff"
            fabStyle={styles.fab}
            small={false}
            style={styles.fabItem}
            actions={[
              {
                onPress: () => handleDeleteRoutine(),
                icon: 'delete',
                label: 'Delete Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
              {
                onPress: () => handleEditRoutine(),
                icon: 'pencil',
                label: 'Edit Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
            ]}
            onStateChange={({ open }) => setFabOpen(open)}
          />
        )}
      </Portal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 10,
  },
  innerContainer: {
    marginHorizontal: '2%',
  },
  header: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  routineHeaders: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingBottom: 5,
    justifyContent: 'space-between',
  },
  detailsContainer: {
    padding: 15,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#fff',
    elevation: 5,
  },
  descriptionText: {
    fontSize: 16,
    fontWeight: '500',
    paddingLeft: 12,
    paddingVertical: 3,
  },
  subroutineHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
  },
  subroutineContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 10,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#1a1a1a',
    elevation: 5,
  },
  subroutineName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  subroutineDuration: {
    fontSize: 14,
    color: '#fff',
  },
  icon: {
    borderWidth: 1,
    borderRadius: 50,
    padding: 5,
    backgroundColor: '#000',
    elevation: 5,
  },
  fab: {
    backgroundColor: '#000',
    borderRadius: 40,
    color: '#fff',
    width: 60,
    height: 60,
    alignItems: 'center',
    justifyContent: 'center',
  },
  fabItem: {
    color: 'red',
  },
  daysContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginTop: 10,
  },
  toggleButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#000',
    paddingVertical: 5,
  },
  toggleButton: {
    borderRadius: 50,
    margin: 5,
    elevation: 10,
    backgroundColor: '#ededed',
  },
  activeToggleButton: {
    backgroundColor: '#000',
    elevation: 10,
  },
  dayIcon: {
    color: '#000',
    fontWeight: 'bold',
    fontSize: 18,
  },
  activeDayIcon: {
    color: '#fff',
  },
  timeText: {
    fontWeight: 'bold', 
    fontSize: 18 
  }
});

export default RoutineDetails;

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
working drag list, but duplicated by flatlist
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Alert, TouchableOpacity, FlatList } from 'react-native';
import { Icon, FAB, Portal, ToggleButton } from 'react-native-paper';
import { useNavigation, useIsFocused } from '@react-navigation/native';
import { fetchRoutinesFromStorage, saveRoutinesToStorage } from '../config/dbHelper';
import { calculateTotalDuration } from '../config/utilities';
import DraggableFlatList from 'react-native-draggable-flatlist';
import moment from 'moment';

const RoutineDetails = ({ route }) => {
  const { routine } = route.params;
  const navigation = useNavigation();
  const [isFabVisible, setFabVisible] = useState(true);
  const [isFabOpen, setFabOpen] = useState(false);
  const isFocused = useIsFocused();

  const selectedTime = routine.selectedTime;
  const selectedDays = routine.selectedDays;

  const handleEditRoutine = () => {
    navigation.navigate('RoutineOps', { routineId: routine.id });
  };

  useEffect(() => {
    setFabVisible(true); // Reset FAB visibility when the component mounts
  }, [isFocused]);

  const handleDeleteRoutine = async () => {
    Alert.alert(
      'Confirm Deletion',
      `Are you sure you want to delete the list "${routine.name}"?`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: async () => {
            // fetch the current routines from storage
            const routines = await fetchRoutinesFromStorage();
            // filter out the routine to be deleted
            const updatedRoutines = routines.filter((r) => r.id !== routine.id);
            // save the updated routines back to storage
            saveRoutinesToStorage(updatedRoutines);
            navigation.navigate('RoutineList');
          },
        },
      ]
    );
  };

  const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  const calculateRoutineTotalDuration = () => {
    return calculateTotalDuration(routine.subroutines);
  };

  return (
    <View style={styles.container}>

      <View style={styles.innerContainer}>
        <View style={[styles.detailsContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }]}>
          <Text style={styles.header}>{routine.name}</Text>
        </View>
        <View style={styles.detailsContainer}>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="alarm" color="#000" size={24} />
              <Text style={styles.descriptionText}>Alarm</Text>
            </View>
            <Text style={styles.timeText}>{moment(selectedTime).format("LT")}</Text>
          </View>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="timer-outline" color="#000" size={24} />
              <Text style={styles.descriptionText}>Duration</Text>
            </View>
            <Text style={styles.timeText}>{calculateRoutineTotalDuration()}</Text>
          </View>

          <View>
            <View style={styles.daysContainer}>
              {Object.keys(selectedDays).map((day) => (
                <ToggleButton
                  key={day}
                  icon={() => (
                    <Text
                      style={[
                        styles.dayIcon,
                        selectedDays[day] && styles.activeDayIcon,
                      ]}
                    >
                      {day.charAt(0).toUpperCase()}
                    </Text>
                  )}
                  value={selectedDays[day]}
                  onPress={() => { }}
                  style={[
                    styles.toggleButton,
                    selectedDays[day] && styles.activeToggleButton,
                  ]}
                >
                  {capitalizeFirstLetter(day)}
                </ToggleButton>
              ))}
            </View>
          </View>
        </View>

        <View style={{marginBottom: '50%'}}>
          <Text style={styles.subroutineHeader}>Subroutines</Text>
          <DraggableFlatList
            data={routine.subroutines}
            renderItem={({ item, index, drag, isActive }) => (
              <TouchableOpacity
                style={{
                  ...styles.subroutineContainer,
                  backgroundColor: isActive ? '#000' : '#1a1a1a',
                }}
                onLongPress={drag}
              >
                <Icon source="hexagon-multiple-outline" color="#fff" size={24} />
                <View style={{ paddingLeft: 20 }}>
                  <Text style={styles.subroutineName}>{item.name}</Text>
                  <Text style={styles.subroutineDuration}>{item.duration}</Text>
                </View>
              </TouchableOpacity>
            )}
            keyExtractor={(item, index) => `subroutine-${index}`}
            onDragEnd={({ data }) => {
              // Update the order of subroutines after dragging
              const updatedRoutine = { ...routine, subroutines: data };
              // Save the updatedRoutine to storage or state
              // For example: saveRoutinesToStorage(updatedRoutine);
            }}
            activationDistance={20}
            ListFooterComponent={() => (
              <FlatList
                data={routine.subroutines}
                renderItem={({ item, index }) => (
                  <TouchableOpacity
                    style={{
                      ...styles.subroutineContainer,
                      backgroundColor: '#1a1a1a',
                    }}
                  >
                    <Icon source="hexagon-multiple-outline" color="#fff" size={24} />
                    <View style={{ paddingLeft: 20 }}>
                      <Text style={styles.subroutineName}>{item.name}</Text>
                      <Text style={styles.subroutineDuration}>{item.duration}</Text>
                    </View>
                  </TouchableOpacity>
                )}
                keyExtractor={(item, index) => `subroutine-${index}`}
              />
            )}
          />
        </View>
      </View>

      <Portal>
        {isFocused && isFabVisible && (
          <FAB.Group
            open={isFabOpen}
            visible
            icon={isFabOpen ? 'cheese-off' : 'cheese'}
            backdropColor={'rgba(222, 222, 222, 0.9)'}
            color="#fff"
            fabStyle={styles.fab}
            small={false}
            style={styles.fabItem}
            actions={[
              {
                onPress: () => handleDeleteRoutine(),
                icon: 'delete',
                label: 'Delete Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
              {
                onPress: () => handleEditRoutine(),
                icon: 'pencil',
                label: 'Edit Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
            ]}
            onStateChange={({ open }) => setFabOpen(open)}
          />
        )}
      </Portal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 10,
  },
  innerContainer: {
    marginHorizontal: '2%',
  },
  header: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  routineHeaders: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingBottom: 5,
    justifyContent: 'space-between',
  },
  detailsContainer: {
    padding: 15,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#fff',
    elevation: 5,
  },
  descriptionText: {
    fontSize: 16,
    fontWeight: '500',
    paddingLeft: 12,
    paddingVertical: 3,
  },
  subroutineHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
  },
  subroutineContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 10,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#1a1a1a',
    elevation: 5,
  },
  subroutineName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  subroutineDuration: {
    fontSize: 14,
    color: '#fff',
  },
  icon: {
    borderWidth: 1,
    borderRadius: 50,
    padding: 5,
    backgroundColor: '#000',
    elevation: 5,
  },
  fab: {
    backgroundColor: '#000',
    borderRadius: 40,
    color: '#fff',
    width: 60,
    height: 60,
    alignItems: 'center',
    justifyContent: 'center',
  },
  fabItem: {
    color: 'red',
  },
  daysContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginTop: 10,
  },
  toggleButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#000',
    paddingVertical: 5,
  },
  toggleButton: {
    borderRadius: 50,
    margin: 5,
    elevation: 10,
    backgroundColor: '#ededed',
  },
  activeToggleButton: {
    backgroundColor: '#000',
    elevation: 10,
  },
  dayIcon: {
    color: '#000',
    fontWeight: 'bold',
    fontSize: 18,
  },
  activeDayIcon: {
    color: '#fff',
  },
  timeText: {
    fontWeight: 'bold',
    fontSize: 18
  }
});

export default RoutineDetails;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

working
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Alert, TouchableOpacity, FlatList } from 'react-native';
import { Icon, FAB, Portal, ToggleButton } from 'react-native-paper';
import { useNavigation, useIsFocused } from '@react-navigation/native';
import { fetchRoutinesFromStorage, saveRoutinesToStorage } from '../config/dbHelper';
import { calculateTotalDuration } from '../config/utilities';
import DraggableFlatList from 'react-native-draggable-flatlist';
import moment from 'moment';

const RoutineDetails = ({ route }) => {
  const { routine } = route.params;
  const navigation = useNavigation();
  const [isFabVisible, setFabVisible] = useState(true);
  const [isFabOpen, setFabOpen] = useState(false);
  const isFocused = useIsFocused();

  const selectedTime = routine.selectedTime;
  const selectedDays = routine.selectedDays;

  const saveRoutineToStorage = async (updatedRoutine) => {
    const routines = await fetchRoutinesFromStorage();
    const updatedRoutines = routines.map((r) =>
      r.id === updatedRoutine.id ? updatedRoutine : r
    );
    saveRoutinesToStorage(updatedRoutines);
  };

  const handleEditRoutine = () => {
    navigation.navigate('RoutineOps', { routineId: routine.id });
  };

  useEffect(() => {
    setFabVisible(true); // Reset FAB visibility when the component mounts
  }, [isFocused]);

  const handleDeleteRoutine = async () => {
    Alert.alert(
      'Confirm Deletion',
      `Are you sure you want to delete the list "${routine.name}"?`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: async () => {
            // fetch the current routines from storage
            const routines = await fetchRoutinesFromStorage();
            // filter out the routine to be deleted
            const updatedRoutines = routines.filter((r) => r.id !== routine.id);
            // save the updated routines back to storage
            saveRoutinesToStorage(updatedRoutines);
            navigation.navigate('RoutineList');
          },
        },
      ]
    );
  };

  const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  const calculateRoutineTotalDuration = () => {
    return calculateTotalDuration(routine.subroutines);
  };

  const renderItem = ({ item, index, drag, isActive }) => (
    <TouchableOpacity
      style={{
        ...styles.subroutineContainer,
        backgroundColor: isActive ? '#000' : '#1a1a1a',
      }}
      onLongPress={drag}
    >
      <Icon source="hexagon-multiple-outline" color="#fff" size={24} />
      <View style={{ paddingLeft: 20 }}>
        <Text style={styles.subroutineName}>{item.name}</Text>
        <Text style={styles.subroutineDuration}>{item.duration}</Text>
      </View>
    </TouchableOpacity>
  );

  return (

    <View style={styles.container}>
      <View style={styles.innerContainer}>
        {/* <View style={[styles.detailsContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }]}>
        </View> */}
        <View style={styles.detailsContainer}>
          <Text style={styles.header}>{routine.name}</Text>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="alarm" color="#000" size={24} />
              <Text style={styles.descriptionText}>Alarm</Text>
            </View>
            <Text style={styles.timeText}>{moment(selectedTime).format("LT")}</Text>
          </View>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="timer-outline" color="#000" size={24} />
              <Text style={styles.descriptionText}>Duration</Text>
            </View>
            <Text style={styles.timeText}>{calculateRoutineTotalDuration()}</Text>
          </View>

          <View>
            <View style={styles.daysContainer}>
              {Object.keys(selectedDays).map((day) => (
                <ToggleButton
                  key={day}
                  icon={() => (
                    <Text
                      style={[
                        styles.dayIcon,
                        selectedDays[day] && styles.activeDayIcon,
                      ]}
                    >
                      {day.charAt(0).toUpperCase()}
                    </Text>
                  )}
                  value={selectedDays[day]}
                  onPress={() => { }}
                  style={[
                    styles.toggleButton,
                    selectedDays[day] && styles.activeToggleButton,
                  ]}
                >
                  {capitalizeFirstLetter(day)}
                </ToggleButton>
              ))}
            </View>
          </View>
        </View>

        <View style={{ flex: 1 }}>
          <Text style={styles.subroutineHeader}>Subroutines</Text>
<DraggableFlatList
  data={routine.subroutines}
  showsVerticalScrollIndicator={false}
  renderItem={renderItem}
  keyExtractor={(item, index) => `subroutine-${index}`}
  onDragEnd={({ data }) => {
    const updatedRoutine = { ...routine, subroutines: data };
    saveRoutineToStorage(updatedRoutine); // Save the updatedRoutine to storage
  }}
  activationDistance={20}
/>
        </View>
      </View>

      <Portal>
        {isFocused && isFabVisible && (
          <FAB.Group
            open={isFabOpen}
            visible
            icon={isFabOpen ? 'cheese-off' : 'cheese'}
            backdropColor={'rgba(222, 222, 222, 0.9)'}
            color="#fff"
            fabStyle={styles.fab}
            small={false}
            style={styles.fabItem}
            actions={[
              {
                onPress: () => handleDeleteRoutine(),
                icon: 'delete',
                label: 'Delete Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
              {
                onPress: () => handleEditRoutine(),
                icon: 'pencil',
                label: 'Edit Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
            ]}
            onStateChange={({ open }) => setFabOpen(open)}
          />
        )}
      </Portal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 10,
  },
  innerContainer: {
    marginHorizontal: '2%',
    flex: 1,
    marginBottom: '15%',
  },
  header: {
    fontSize: 22,
    marginBottom: 5,
    fontWeight: 'bold',
    letterSpacing: 0.8,
    backgroundColor: '#fff',
    elevation: 5,
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 5,
  },
  routineHeaders: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingBottom: 5,
    justifyContent: 'space-between',
  },
  detailsContainer: {
    padding: 15,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#fff',
    elevation: 5,
  },
  descriptionText: {
    fontSize: 16,
    fontWeight: '500',
    paddingLeft: 12,
    paddingVertical: 3,
  },
  subroutineHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
  },
  subroutineContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 10,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#1a1a1a',
    elevation: 5,
  },
  subroutineName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  subroutineDuration: {
    fontSize: 14,
    color: '#fff',
  },
  icon: {
    borderWidth: 1,
    borderRadius: 50,
    padding: 5,
    backgroundColor: '#000',
    elevation: 5,
  },
  fab: {
    backgroundColor: '#000',
    borderRadius: 40,
    color: '#fff',
    width: 60,
    height: 60,
    alignItems: 'center',
    justifyContent: 'center',
  },
  fabItem: {
    color: 'red',
  },
  daysContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginTop: 10,
  },
  toggleButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#000',
    paddingVertical: 5,
  },
  toggleButton: {
    borderRadius: 50,
    margin: 5,
    elevation: 10,
    backgroundColor: '#ededed',
  },
  activeToggleButton: {
    backgroundColor: '#000',
    elevation: 10,
  },
  dayIcon: {
    color: '#000',
    fontWeight: 'bold',
    fontSize: 18,
  },
  activeDayIcon: {
    color: '#fff',
  },
  timeText: {
    fontWeight: 'bold',
    fontSize: 18
  }
});

export default RoutineDetails;

///////////////////////////////
// SubroutineTimer.js
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Button } from 'react-native';

const SubroutineTimer = ({ navigation, route }) => {
  const { subroutine } = route.params;
  const [timer, setTimer] = useState(subroutine.duration);
  const [isActive, setIsActive] = useState(false);

  useEffect(() => {
    let interval;

    if (isActive) {
      interval = setInterval(() => {
        if (timer > 0) {
          setTimer((prevTimer) => prevTimer - 1);
        } else {
          // Timer completed, you can add logic here
          setIsActive(false);
          clearInterval(interval);
        }
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isActive, timer]);

  const handleStart = () => {
    setIsActive(true);
  };

  const handlePause = () => {
    setIsActive(false);
  };

  const handleSkip = () => {
    // Add logic to handle skipping the current subroutine
    setIsActive(false);
    setTimer(0); // Set timer to 0 for simplicity
  };

  const handleComplete = () => {
    // Add logic to handle completing the current subroutine
    setIsActive(false);
    setTimer(0); // Set timer to 0 for simplicity
  };

  return (
    <View style={styles.container}>
      <Text style={styles.timer}>{timer} seconds</Text>
      <View style={styles.buttonContainer}>
        <Button title="Start" onPress={handleStart} />
        <Button title="Pause" onPress={handlePause} />
        <Button title="Skip" onPress={handleSkip} />
        <Button title="Complete" onPress={handleComplete} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  timer: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
});

export default SubroutineTimer;

////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
routineDetails with left side long press to drah + some errors
import React, { useEffect, useState, useCallback } from 'react';
import { View, Text, StyleSheet, Alert, Pressable, FlatList } from 'react-native';
import { Icon, FAB, Portal, ToggleButton, ActivityIndicator } from 'react-native-paper';
import { useNavigation, useIsFocused, useFocusEffect } from '@react-navigation/native';
import { fetchRoutinesFromStorage, saveRoutinesToStorage } from '../config/dbHelper';
import { calculateTotalDuration, calculateTotalSubroutines } from '../config/utilities';
import DraggableFlatList from 'react-native-draggable-flatlist';
import moment from 'moment';

const RoutineDetails = ({ route }) => {
  const { routine: initialRoutine } = route.params;
  const [routine, setRoutine] = useState(initialRoutine);

  const navigation = useNavigation();

  const [isFabVisible, setFabVisible] = useState(true);
  const [isFabOpen, setFabOpen] = useState(false);
  const isFocused = useIsFocused();

  const selectedTime = routine.selectedTime;
  const selectedDays = routine.selectedDays;

  const [loading, setLoading] = useState(false);
  
  const totalSubroutines = calculateTotalSubroutines(routine.subroutines);

  useEffect(() => {
    const updateStorage = async () => {
      await saveRoutineToStorage({ ...routine, subroutines: routine.subroutines });
    };
    updateStorage();
  }, [routine.subroutines]);
  
  const updateRoutine = useCallback(
    async (updatedRoutine) => {
      try {
        setLoading(true);
        await saveRoutineToStorage(updatedRoutine);
        setRoutine(updatedRoutine);
      } finally {
        setLoading(false);
      }
    },
    [setRoutine]
  );
  useFocusEffect(
    React.useCallback(() => {
      // Fetch the updated routine from storage when the screen is focused
      const fetchUpdatedRoutine = async () => {
        const routines = await fetchRoutinesFromStorage();
        const updatedRoutine = routines.find(r => r.id === routine.id);

        if (updatedRoutine) {
          setRoutine(updatedRoutine);
        }
      };

      fetchUpdatedRoutine();
    }, [routine.id]) // Re-run effect when routine.id changes
  );
  const saveRoutineToStorage = async (updatedRoutine) => {
    try {
      //console.log('Updating storage:', updatedRoutine);
      // Fetch the current routines from storage
      const routines = await fetchRoutinesFromStorage();
      // Update the routine in the array
      const updatedRoutines = routines.map((r) =>
        r.id === updatedRoutine.id ? updatedRoutine : r
      );
      // Save the updated routines back to storage
      await saveRoutinesToStorage(updatedRoutines);
      //console.log('Storage updated successfully');
    } catch (error) {
      console.error('Error saving routine to storage:', error);
      //console.log('Current routines:', await fetchRoutinesFromStorage());
    }
  };

  const handleEditRoutine = () => {
    navigation.navigate('RoutineOps', { routineId: routine.id });
  };

  useEffect(() => {
    setFabVisible(true); // Reset FAB visibility when the component mounts
  }, [isFocused]);
  const handleDragEnd = ({ data }) => {
    const updatedRoutine = { ...routine, subroutines: data };
    updateRoutine(updatedRoutine);
  };

  const handleDeleteRoutine = async () => {
    Alert.alert(
      'Confirm Deletion',
      `Are you sure you want to delete the list "${routine.name}"?`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: async () => {
            // fetch the current routines from storage
            const routines = await fetchRoutinesFromStorage();
            // filter out the routine to be deleted
            const updatedRoutines = routines.filter((r) => r.id !== routine.id);
            // save the updated routines back to storage
            saveRoutinesToStorage(updatedRoutines);
            navigation.navigate('RoutineList');
          },
        },
      ]
    );
  };

  const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  const calculateRoutineTotalDuration = () => {
    return calculateTotalDuration(routine.subroutines);
  };

  const handleSubroutinePress = (subroutine) => {
    // console.log('Navigating to Subroutine:', subroutine);
    navigation.navigate('Subroutine', { subroutine });
  };
  
  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };

  const renderItem = ({ item, index, drag, isActive }) => {
    // Extract numeric value from duration string (assuming it's in the format "X minutes")
    const durationMatch = item.duration.match(/(\d+)/);
  
    if (durationMatch) {
      const durationInMinutes = parseInt(durationMatch[0], 10);
  
      const handlePress = (e) => {
        // Get the x-coordinate of the press event
        const { locationX } = e.nativeEvent;
  
        // Define a threshold for the left side (adjust as needed)
        const leftThreshold = 60;
  
        // Only allow drag if the press is on the left side of the item
        if (locationX < leftThreshold) {
          drag();
        } else {
          // Handle the regular press event on the right side
          handleSubroutinePress(item);
        }
      };
  
      return (
        <Pressable
          android_ripple={{ color: '#525252' }}
          style={{
            ...styles.subroutineContainer,
            backgroundColor: isActive ? 'gray' : '#000',
            borderColor: isActive ? '#1f1f1f' : 'transparent',
            borderWidth: isActive ? 1 : 0,
          }}
          onPress={handleSubroutinePress}
          onLongPress={handlePress}
        >
          <Icon source="hexagon-multiple-outline" color="#fff" size={24} />
          <View style={{ paddingLeft: 20 }}>
            <Text style={styles.subroutineName}>{item.name}</Text>
            {/* Use the numeric value for the duration */}
            <Text style={styles.subroutineDuration}>
              {formatTime(durationInMinutes * 60)} {/* Convert to seconds for the timer */}
            </Text>
          </View>
        </Pressable>
      );
    } else {
      console.error(`Invalid duration format for subroutine: ${item.duration}`);
      return null;
    }
  };
  
  return (
    <View style={styles.container}>
      <View style={styles.innerContainer}>
        {/* <View style={[styles.detailsContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }]}>
        </View> */}
        <View style={styles.detailsContainer}>
          <Text style={styles.header}>{routine.name}</Text>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="alarm" color="#000" size={24} />
              <Text style={styles.descriptionText}>Alarm</Text>
            </View>
            <Text style={styles.timeText}>{moment(selectedTime).format("LT")}</Text>
          </View>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="timer-outline" color="#000" size={24} />
              <Text style={styles.descriptionText}>Duration</Text>
            </View>
            <Text style={styles.timeText}>{calculateRoutineTotalDuration()}</Text>
          </View>

          <View>
            <View style={styles.daysContainer}>
              {Object.keys(selectedDays).map((day) => (
                <ToggleButton
                  key={day}
                  icon={() => (
                    <Text
                      style={[
                        styles.dayIcon,
                        selectedDays[day] && styles.activeDayIcon,
                      ]}
                    >
                      {day.charAt(0).toUpperCase()}
                    </Text>
                  )}
                  value={selectedDays[day]}
                  onPress={() => { }}
                  style={[
                    styles.toggleButton,
                    selectedDays[day] && styles.activeToggleButton,
                  ]}
                >
                  {capitalizeFirstLetter(day)}
                </ToggleButton>
              ))}
            </View>
          </View>
        </View>
        <View style={{ flex: 1 }}>
          <Text style={styles.subroutineHeader}>Subroutines ({totalSubroutines})</Text>
          <DraggableFlatList
            data={routine.subroutines}
            showsVerticalScrollIndicator={false}
            renderItem={renderItem}
            keyExtractor={(item, index) => `subroutine-${index}`}
            onDragEnd={handleDragEnd}
            activationDistance={20}
            />
            {loading && (
              <View style={styles.loadingOverlay}>
                <ActivityIndicator size="large" color="#000" />
              </View>
            )}
        </View>
      </View>

      <Portal>
        {isFocused && isFabVisible && (
          <FAB.Group
            open={isFabOpen}
            visible
            icon={isFabOpen ? 'cheese-off' : 'cheese'}
            backdropColor={'rgba(222, 222, 222, 0.9)'}
            color="#fff"
            fabStyle={styles.fab}
            small={false}
            style={styles.fabItem}
            actions={[
              {
                onPress: () => handleDeleteRoutine(),
                icon: 'delete',
                label: 'Delete Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
              {
                onPress: () => handleEditRoutine(),
                icon: 'pencil',
                label: 'Edit Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
            ]}
            onStateChange={({ open }) => setFabOpen(open)}
          />
        )}
      </Portal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 10,
  },
  innerContainer: {
    marginHorizontal: '2%',
    flex: 1,
    marginBottom: '15%',
  },
  header: {
    fontSize: 22,
    marginBottom: 5,
    fontWeight: 'bold',
    letterSpacing: 0.8,
    backgroundColor: '#fff',
    elevation: 5,
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 5,
  },
  routineHeaders: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingBottom: 5,
    justifyContent: 'space-between',
  },
  detailsContainer: {
    padding: 15,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#fff',
    elevation: 5,
  },
  descriptionText: {
    fontSize: 16,
    fontWeight: '500',
    paddingLeft: 12,
    paddingVertical: 3,
  },
  subroutineHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
  },
  subroutineContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    margin: 5,
    borderRadius: 5,
  },
  subroutineName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  subroutineDuration: {
    fontSize: 14,
    color: '#fff',
  },
  icon: {
    borderWidth: 1,
    borderRadius: 50,
    padding: 5,
    backgroundColor: '#000',
    elevation: 5,
  },
  fab: {
    backgroundColor: '#000',
    borderRadius: 40,
    color: '#fff',
    width: 60,
    height: 60,
    alignItems: 'center',
    justifyContent: 'center',
  },
  fabItem: {
    color: 'red',
  },
  daysContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginTop: 10,
  },
  toggleButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#000',
    paddingVertical: 5,
  },
  toggleButton: {
    borderRadius: 50,
    margin: 5,
    elevation: 10,
    backgroundColor: '#ededed',
  },
  activeToggleButton: {
    backgroundColor: '#000',
    elevation: 10,
  },
  dayIcon: {
    color: '#000',
    fontWeight: 'bold',
    fontSize: 18,
  },
  activeDayIcon: {
    color: '#fff',
  },
  timeText: {
    fontWeight: 'bold',
    fontSize: 18
  },
  loadingOverlay: {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default RoutineDetails;

////////////////////////////////////////////////////////////////////////
subroutines with working complete mark + warning

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Button,
  StatusBar,
  Pressable,
  useWindowDimensions,
  Dimensions
} from 'react-native';
import { ProgressBar, Icon } from 'react-native-paper';

const Subroutine = ({ navigation, route }) => {
  const { subroutine, routine, markSubroutineAsCompleted  } = route.params;

  const parseDuration = (duration) => {
    if (typeof duration === 'string') {
      const numericValue = parseInt(duration, 10);
      return isNaN(numericValue) ? 0 : numericValue * 60; // Convert to seconds
    } else if (typeof duration === 'number') {
      return duration * 60; // Convert to seconds
    } else {
      return 0;
    }
  };

  const [timer, setTimer] = useState(parseDuration(subroutine.duration));
  const [isActive, setIsActive] = useState(false);
  
  useEffect(() => {
    let interval;

    if (isActive) {
      interval = setInterval(() => {
        if (timer > 0) {
          setTimer((prevTimer) => prevTimer - 1);
        } else {
          setIsActive(false);
          clearInterval(interval);
        }
      }, 1000);
    }

    return () => {
      clearInterval(interval);
    };
  }, [isActive, timer]);

  // Add this useEffect to handle the conversion of the duration string
  useEffect(() => {
    setTimer(parseDuration(subroutine.duration));
  }, [subroutine.duration]);

  useEffect(() => {
    // Calculate progress whenever timer or subroutine duration changes
    const progress = calculateProgress();
    // console.log('timer:', timer);
    // console.log('subroutine.duration:', subroutine.duration);
    // console.log('calculatedProgress:', progress);
  }, [timer, subroutine.duration]);

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(
      2,
      '0'
    )}`;
  };

  const handleStart = () => {
    setIsActive(true);
  };

  const handlePause = () => {
    setIsActive(false);
  };

  const handleSkip = () => {
    navigation.navigate('RoutineDetails', { routine: routine });
  };

  const handleComplete = () => {
    setIsActive(false);
    setTimer(0);
    markSubroutineAsCompleted();
    navigation.navigate('RoutineDetails', { routine });
  };

  const calculateProgress = () => {
    // console.log('calculateProgress called');
    // console.log('timer:', timer);
    // console.log('subroutine.duration:', subroutine.duration, typeof subroutine.duration);

    const durationInSeconds = parseDuration(subroutine.duration);

    if (!durationInSeconds || isNaN(timer) || timer <= 0) {
      // console.log('calculatedProgress: 0 (duration or timer is invalid)');
      return 0;
    }

    // Invert the progress to repres// ent a countdown
    const calculatedProgress = Math.max(
      0,
      Math.min(1, timer / durationInSeconds)
    );
    // console.log('calculatedProgress:', calculatedProgress);
    return calculatedProgress;
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#000" />
      
        <View style={styles.title}>
          <Text style={styles.subName}>{subroutine.name}</Text>
        </View>
      <View style={styles.innerContainer}>
      <View style={styles.timerContainer}>
        <Text style={styles.timer}>{formatTime(timer)}</Text>
      </View>
      <View style={styles.progressContainer}>
      <ProgressBar progress={calculateProgress()} color='#fff' style={styles.progressBar}/>
      </View>
      <View style={styles.controlCenter}>
        <View style={styles.buttonContainer}>
          <Pressable style={styles.playButton} onPress={isActive ? handlePause : handleStart} >
            {isActive ? (
              <Icon source="pause" color="#fff" size={40} style={styles.addIcon}/>
            ) : (
              <Icon source="play" color="#fff" size={40} style={styles.addIcon} />
            )}
          </Pressable>
          <Text style={styles.buttonText}>{isActive ? 'Pause' : 'Start'}</Text>
        </View>
        <View style={styles.buttonContainer}>
          <Pressable
            style={[styles.playButton, { width: 80, height: 80 }]}
            onPress={handleComplete}
          >
            <Icon
              source="check"
              color="#fff"
              size={40}
              style={styles.addIcon}
              />
          </Pressable>
          <Text style={styles.buttonText}>Complete</Text>
        </View>
        <View style={styles.buttonContainer}>
          <Pressable style={styles.playButton} onPress={handleSkip}>
            <Icon
              source="skip-next"
              color="#fff"
              size={40}
              style={styles.addIcon}
              />
          </Pressable>
          <Text style={styles.buttonText}>Skip</Text>
        </View>
              </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  innerContainer: {
    flex: 1,
    marginHorizontal: '2%',
    justifyContent: 'flex-end',
  },
  subName: {
    fontSize: 26,
    fontWeight: 'bold',
    letterSpacing: 1,
    color: '#fff',
  },
  title: {
    width: '90%',
    backgroundColor: '#171717',
    paddingVertical: 10,
    marginHorizontal: '2%',
    borderRadius: 5,
    alignItems: 'center',
    alignSelf: 'center',
    elevation: 5,
    marginTop: 10
  },
  timerContainer: {
    alignItems: 'center',
    marginHorizontal: 15,
    borderRadius: 5,
    backgroundColor: '#171717',
    marginBottom: 10
  },
  progressContainer:  {
    marginHorizontal: 15,
  },
  progressBar: {
    height: 10,
    borderRadius: 5,
    width: '100%'
  },
  playButton: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 70,
    height: 70,
    backgroundColor: '#000',
    borderRadius: 100,
    elevation: 10,
  },
  timer: {
    fontSize: 60,
    fontWeight: 'bold',
    padding: 10,
    letterSpacing: 2,
    color: '#fff',
  },
  buttonContainer: {
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
    marginTop: 10,
  },
  controlCenter: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    marginVertical: 15,
    backgroundColor: '#171717',
    marginHorizontal: 15,
    borderRadius: 5,
    paddingVertical: 30,
    elevation: 7,
  },

});

export default Subroutine;

///

import React, { useEffect, useState, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  Pressable,
  FlatList,
} from 'react-native';
import {
  Icon,
  FAB,
  Portal,
  ToggleButton,
  ActivityIndicator,
} from 'react-native-paper';
import {
  useNavigation,
  useIsFocused,
  useFocusEffect,
} from '@react-navigation/native';
import {
  fetchRoutinesFromStorage,
  saveRoutinesToStorage,
} from '../config/dbHelper';
import {
  calculateTotalDuration,
  calculateTotalSubroutines,
} from '../config/utilities';
import DraggableFlatList from 'react-native-draggable-flatlist';
import moment from 'moment';

const RoutineDetails = ({ route }) => {
  const { routine: initialRoutine } = route.params;
  const [routine, setRoutine] = useState(initialRoutine);

  const navigation = useNavigation();

  const [isFabVisible, setFabVisible] = useState(true);
  const [isFabOpen, setFabOpen] = useState(false);
  const isFocused = useIsFocused();

  const selectedTime = routine.selectedTime;
  const selectedDays = routine.selectedDays;

  const [loading, setLoading] = useState(false);

  const totalSubroutines = calculateTotalSubroutines(routine.subroutines);
  const [completedSubroutines, setCompletedSubroutines] = useState([]);

  useEffect(() => {
    const updateStorage = async () => {
      await saveRoutineToStorage({
        ...routine,
        subroutines: routine.subroutines,
      });
    };
    updateStorage();
  }, [routine.subroutines]);

  const updateRoutine = useCallback(
    async (updatedRoutine) => {
      try {
        setLoading(true);
        await saveRoutineToStorage(updatedRoutine);
        setRoutine(updatedRoutine);
      } finally {
        setLoading(false);
      }
    },
    [setRoutine]
  );
  useFocusEffect(
    React.useCallback(() => {
      // Fetch the updated routine from storage when the screen is focused
      const fetchUpdatedRoutine = async () => {
        const routines = await fetchRoutinesFromStorage();
        const updatedRoutine = routines.find((r) => r.id === routine.id);

        if (updatedRoutine) {
          setRoutine(updatedRoutine);
        }
      };

      fetchUpdatedRoutine();
    }, [routine.id]) // Re-run effect when routine.id changes
  );
  const saveRoutineToStorage = async (updatedRoutine) => {
    try {
      //console.log('Updating storage:', updatedRoutine);
      // Fetch the current routines from storage
      const routines = await fetchRoutinesFromStorage();
      // Update the routine in the array
      const updatedRoutines = routines.map((r) =>
        r.id === updatedRoutine.id ? updatedRoutine : r
      );
      // Save the updated routines back to storage
      await saveRoutinesToStorage(updatedRoutines);
      //console.log('Storage updated successfully');
    } catch (error) {
      console.error('Error saving routine to storage:', error);
      //console.log('Current routines:', await fetchRoutinesFromStorage());
    }
  };

  const handleEditRoutine = () => {
    navigation.navigate('RoutineOps', { routineId: routine.id });
  };

  useEffect(() => {
    setFabVisible(true); // Reset FAB visibility when the component mounts
  }, [isFocused]);
  const handleDragEnd = ({ data }) => {
    const updatedRoutine = { ...routine, subroutines: data };
    updateRoutine(updatedRoutine);
  };

  const handleDeleteRoutine = async () => {
    Alert.alert(
      'Confirm Deletion',
      `Are you sure you want to delete the list "${routine.name}"?`,
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: async () => {
            // fetch the current routines from storage
            const routines = await fetchRoutinesFromStorage();
            // filter out the routine to be deleted
            const updatedRoutines = routines.filter((r) => r.id !== routine.id);
            // save the updated routines back to storage
            saveRoutinesToStorage(updatedRoutines);
            navigation.navigate('RoutineList');
          },
        },
      ]
    );
  };

  const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  const calculateRoutineTotalDuration = () => {
    return calculateTotalDuration(routine.subroutines);
  };
  const markSubroutineAsCompleted = (subroutine) => {
    const updatedSubroutines = routine.subroutines.map((s) =>
      s === subroutine ? { ...s, completed: true } : s
    );
    const updatedRoutine = { ...routine, subroutines: updatedSubroutines };
    updateRoutine(updatedRoutine);
  };
  
  const handleSubroutinePress = useCallback(
    (subroutine) => {
      navigation.navigate('Subroutine', {
        subroutine,
        markSubroutineAsCompleted: () => markSubroutineAsCompleted(subroutine),
      });
    },
    [navigation, markSubroutineAsCompleted]
  );
  

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(
      2,
      '0'
    )}`;
  };

  const handleToggleCompletion = (subroutine) => {
    //console.log('Toggle Completion - Subroutine:', subroutine);
  
    const updatedSubroutines = routine.subroutines.map((s, index) =>
      s === subroutine
        ? { ...s, completed: !s.completed }
        : s
    );
  
    const updatedRoutine = {
      ...routine,
      subroutines: updatedSubroutines,
    };
  
    //console.log('Toggle Completion - Updated Routine:', updatedRoutine);
  
    updateRoutine(updatedRoutine);
  };
  
const renderItem = ({ item, index, drag, isActive }) => {
  const durationMatch = item.duration.match(/(\d+)/);

  if (durationMatch) {
    const durationInMinutes = parseInt(durationMatch[0], 10);
    const isCompleted = item.completed;

    return (
      <Pressable
        android_ripple={{ color: '#525252' }}
        style={{
          ...styles.subroutineContainer,
          backgroundColor: isCompleted ? '#4CAF50' : '#000',
          borderColor: isActive ? '#1f1f1f' : 'transparent',
          borderWidth: isActive ? 1 : 0,
          flexDirection: 'row',
          justifyContent: 'space-between',
        }}
        onLongPress={drag}
        onPress={() => handleSubroutinePress(item)}
      >
        {/* Left side content */}
        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
          <Icon source="hexagon-multiple-outline" color="#fff" size={24} />
          <View style={{ paddingLeft: 20 }}>
            <Text style={styles.subroutineName}>{item.name}</Text>
            <Text style={styles.subroutineDuration}>
              {formatTime(durationInMinutes * 60)}
            </Text>
          </View>
        </View>
        {/* Right side content */}
        <Pressable onPress={() => handleToggleCompletion(item)}>
          <Icon
            source={isCompleted ? 'progress-check' : 'circle-outline'}
            color="#fff"
            size={24}
          />
        </Pressable>
      </Pressable>
    );
  } else {
    console.error(`Invalid duration format for subroutine: ${item.duration}`);
    return null;
  }
};


  return (
    <View style={styles.container}>
      <View style={styles.innerContainer}>
        {/* <View style={[styles.detailsContainer, { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }]}>
        </View> */}
        <View style={styles.detailsContainer}>
          <Text style={styles.header}>{routine.name}</Text>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="alarm" color="#000" size={24} />
              <Text style={styles.descriptionText}>Alarm</Text>
            </View>
            <Text style={styles.timeText}>
              {moment(selectedTime).format('LT')}
            </Text>
          </View>
          <View style={styles.routineHeaders}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Icon source="timer-outline" color="#000" size={24} />
              <Text style={styles.descriptionText}>Duration</Text>
            </View>
            <Text style={styles.timeText}>
              {calculateRoutineTotalDuration()}
            </Text>
          </View>

          <View>
            <View style={styles.daysContainer}>
              {Object.keys(selectedDays).map((day) => (
                <ToggleButton
                  key={day}
                  icon={() => (
                    <Text
                      style={[
                        styles.dayIcon,
                        selectedDays[day] && styles.activeDayIcon,
                      ]}
                    >
                      {day.charAt(0).toUpperCase()}
                    </Text>
                  )}
                  value={selectedDays[day]}
                  onPress={() => {}}
                  style={[
                    styles.toggleButton,
                    selectedDays[day] && styles.activeToggleButton,
                  ]}
                >
                  {capitalizeFirstLetter(day)}
                </ToggleButton>
              ))}
            </View>
          </View>
        </View>
        <View style={{ flex: 1 }}>
          <Text style={styles.subroutineHeader}>
            Subroutines ({totalSubroutines})
          </Text>
          <DraggableFlatList
            data={routine.subroutines}
            showsVerticalScrollIndicator={false}
            renderItem={renderItem}
            keyExtractor={(item, index) => `subroutine-${index}`}
            onDragEnd={handleDragEnd}
            activationDistance={20}
          />
          {loading && (
            <View style={styles.loadingOverlay}>
              <ActivityIndicator size="large" color="#000" />
            </View>
          )}
        </View>
      </View>

      <Portal>
        {isFocused && isFabVisible && (
          <FAB.Group
            open={isFabOpen}
            visible
            icon={isFabOpen ? 'cheese-off' : 'cheese'}
            backdropColor={'rgba(222, 222, 222, 0.9)'}
            color="#fff"
            fabStyle={styles.fab}
            small={false}
            style={styles.fabItem}
            actions={[
              {
                onPress: () => handleDeleteRoutine(),
                icon: 'delete',
                label: 'Delete Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
              {
                onPress: () => handleEditRoutine(),
                icon: 'pencil',
                label: 'Edit Routine',
                labelStyle: { color: '#000', fontWeight: 'bold' },
                color: '#000',
                style: { backgroundColor: '#fff' },
                size: 1,
              },
            ]}
            onStateChange={({ open }) => setFabOpen(open)}
          />
        )}
      </Portal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingHorizontal: 10,
  },
  innerContainer: {
    marginHorizontal: '2%',
    flex: 1,
    marginBottom: '15%',
  },
  header: {
    fontSize: 22,
    marginBottom: 5,
    fontWeight: 'bold',
    letterSpacing: 0.8,
    backgroundColor: '#fff',
    elevation: 5,
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 5,
  },
  routineHeaders: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingBottom: 5,
    justifyContent: 'space-between',
  },
  detailsContainer: {
    padding: 15,
    marginVertical: 5,
    borderRadius: 5,
    backgroundColor: '#fff',
    elevation: 5,
  },
  descriptionText: {
    fontSize: 16,
    fontWeight: '500',
    paddingLeft: 12,
    paddingVertical: 3,
  },
  subroutineHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
  },
  subroutineContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    margin: 5,
    borderRadius: 5,
  },
  subroutineName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  subroutineDuration: {
    fontSize: 14,
    color: '#fff',
  },
  icon: {
    borderWidth: 1,
    borderRadius: 50,
    padding: 5,
    backgroundColor: '#000',
    elevation: 5,
  },
  fab: {
    backgroundColor: '#000',
    borderRadius: 40,
    color: '#fff',
    width: 60,
    height: 60,
    alignItems: 'center',
    justifyContent: 'center',
  },
  fabItem: {
    color: 'red',
  },
  daysContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    marginTop: 10,
  },
  toggleButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#000',
    paddingVertical: 5,
  },
  toggleButton: {
    borderRadius: 50,
    margin: 5,
    elevation: 10,
    backgroundColor: '#ededed',
  },
  activeToggleButton: {
    backgroundColor: '#000',
    elevation: 10,
  },
  dayIcon: {
    color: '#000',
    fontWeight: 'bold',
    fontSize: 18,
  },
  activeDayIcon: {
    color: '#fff',
  },
  timeText: {
    fontWeight: 'bold',
    fontSize: 18,
  },
  loadingOverlay: {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default RoutineDetails;

//////////////////////////////////////////////////////////////////////